Starting code feedback for Hongyuan, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 32.92 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: HPC, .git, week1, MiniProject, week2, Feedback, week3, week7

Found the following files in parent directory: README.md, .DS_Store

Checking for key files in parent directory...

.gitignore missing, 1 pt deducted

Current Points = 99

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEECoursework Repository

## Description

This repository contains all CMEE coursework files.

## Languages

Python, R, Jupyter, Latex, Shell

## Author name and contact

Name: Hongyuan Guo

Email: hg2423@ic.ac.uk
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: week1, week2, week3, week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: results, code

Found the following files: .DS_Store

Checking for readme file in weekly directory...

README file missing, 1 pt deducted

Current Points = 98

Data directory missing!

Found following files in results directory: LV_model1.pdf, LV_model2.pdf...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 97.0

Found 5 code files: profileme2.py, profileme.py, MyFirstJupyterNb.ipynb, timeitme.py, LV1.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file profileme2.py...

File contents are:

**********************************************************************
def my_squares(iters):
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 2.21893s

======================================================================
Inspecting script file profileme.py...

File contents are:

**********************************************************************
def my_squares(iters):
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 90.0

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 2.87632s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:

**********************************************************************

**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file timeitme.py...

File contents are:

**********************************************************************
##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join
import time
start = time.time()
my_squares_loops(iters)
print(f"my_squares_loops takes {time.time() - start} s to run.")

start = time.time()
my_squares_lc(iters)
print(f"my_squares_lc takes {time.time() - start} s to run.")
**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 88.0

Output (only first 500 characters): 


**********************************************************************
10000000 My string
10000000 My string
my_squares_loops takes 0.1723155975341797 s to run.
my_squares_lc takes 0.16372442245483398 s to run.

**********************************************************************

Code ran without errors

Time consumed = 5.32212s

======================================================================
Inspecting script file LV1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

__appname__ = 'LV1.py'
__author__ = 'Hongyuan Guo (hg2423@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = ""


"""Example of numerical integration to solve the Lotka-Volterra model and plot"""


import numpy as np
import scipy as sc
from scipy import integrate
import matplotlib.pylab as p
import sys



def dCR_dt(pops, t=0):

    """Returns the growth rate of consumer(e.g.,predator) and resource(e.g.,prey) population at given time"""

    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return np.array([dRdt, dCdt])

r = 1.
a = 0.1 
z = 1.5
e = 0.75
t = np.linspace(0, 15, 1000)
R0 = 10
C0 = 5 
RC0 = np.array([R0, C0])


def plot1(pops, t, r, a, z, e):

  """Plot population density ~ time"""

  f1 = p.figure()
  p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
  p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
  p.grid()
  p.legend(loc='best')
  p.xlabel('Time')
  p.ylabel('Population density')
  p.title('Consumer-Resource population dynamics')
  return f1
  

def plot2(pops, r, a, z, e):

  """Plot consumer density ~ resource density"""

  f2 = p.figure()
  p.plot(pops[:,0],pops[:,1], 'r-')
  p.grid()
  p.xlabel('Resource density')
  p.ylabel('Consumer density')
  p.title('Consumer-Resource population dynamics')
  return f2
 

def main(argv):

  """Main entry of this program"""

  pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
  p1 = plot1(pops,t,r,a,z,e)
  p2 = plot2(pops,r,a,z,e)
  p1.savefig('../results/LV_model1.pdf')
  p2.savefig('../results/LV_model2.pdf')
  return 0


if __name__ == "__main__":
  """Make sure the main function is called from command line"""
  status = main(sys.argv)
  sys.exit(status)
**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 88.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.74072s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 88.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!