MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
str(MyDF)
require(tidyverse)
glimpse(MyDF)
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location <- as.factor(MyDF$Location)
str(MyDF)
plot(MyDF$Predator.mass,MyDF$Prey.mass)
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass))
plot(log10(MyDF$Predator.mass),log10(MyDF$Prey.mass))
par(mfcol=c(2,1)) #initialize multi-paneled plot
par(mfg = c(1,1)) # specify which sub-plot to use first
hist(log10(MyDF$Predator.mass),
xlab = "log10(Predator Mass (g))", ylab = "Count", col = "lightblue", border = "pink",
main = 'Predator') # Add title
par(mfg = c(2,1)) # Second sub-plot
hist(log10(MyDF$Prey.mass), xlab="log10(Prey Mass (g))",ylab="Count", col = "lightgreen", border = "pink", main = 'prey')
hist(log10(MyDF$Predator.mass), # Predator histogram
xlab="log10(Body Mass (g))", ylab="Count",
col = rgb(1, 0, 0, 0.5), # Note 'rgb', fourth value is transparency
main = "Predator-prey size Overlap")
hist(log10(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = T) # Plot prey
legend('topleft',c('Predators','Prey'),   # Add legend
fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))) # Define legend colors
pdf("../results/Pred_Prey_Overlay.pdf", # Open blank pdf page using a relative path
11.7, 8.3) # These numbers are page dimensions in inches
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap")
hist(log(MyDF$Prey.mass), # Plot prey weights
col = rgb(0, 0, 1, 0.5),
add = T)  # Add to same plot = TRUE
legend('topleft',c('Predators','Prey'), # Add legend
fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5)))
graphics.off(); #you can also use dev.off()
pdf("../results/MyFirst-ggplot2-Figure.pdf")
print(qplot(Prey.mass, Predator.mass, data = MyDF,log="xy",
main = "Relation between predator and prey mass",
xlab = "log(Prey mass) (g)",
ylab = "log(Predator mass) (g)") + theme_bw())
dev.off()
source("TreeHeight.R")
source("TreeHeight.R")
source("TreeHeight.R")
setwd("/Users/guohongyuan/Desktop/CMEECourseWork/week3/MyRCoursework/code")
source("TreeHeight.R")
source("TreeHeight.R")
source("./code/TreeHeight.R")
setwd("/Users/guohongyuan/Desktop/CMEECourseWork/week3/MyRCoursework/code")
source("Florida.R")
View(ats)
class(ats)
head(ats)
plot(ats)
cor
help cor()
load("~/Desktop/CMEECourseWork/week3/MyRCoursework/data/KeyWestAnnualMeanTemperature.RData")
View(ats)
View(ats)
cor(Year,Temp)
source("Florida.R")
source("Florida.R")
View(data)
source("Florida.R")
load("~/Desktop/CMEECourseWork/week3/MyRCoursework/data/KeyWestAnnualMeanTemperature.RData")
load("~/Desktop/CMEECourseWork/week3/MyRCoursework/data/KeyWestAnnualMeanTemperature.RData")
# Q1: Compute the observed correlation coefficient between Years and Temperature
obs_corr <- cor(keyWestTemps$Year, keyWestTemps$Temp)
source("Florida.R")
source("Florida.R")
source("Florida.R")
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
MyMetaData
source("DataWrang.R")
MyMetaData
MyData <- t(MyData)
head(MyData)
colnames(MyData)
require(reshape2)# load the reshape2 package
require(reshape2)
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well
MyWrangledData <- dplyr::as_tibble(MyWrangledData)
MyWrangledData
############# Exploring the data (extend the script below)  ###############
source("DataWrang.R")
install.packages(XQuartz)
